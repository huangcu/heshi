uint8  : 0 to 255 
uint16 : 0 to 65535 
uint32 : 0 to 4294967295 
uint64 : 0 to 18446744073709551615 
int8   : -128 to 127 
int16  : -32768 to 32767 
int32  : -2147483648 to 2147483647 
int64  : -9223372036854775808 to 9223372036854775807
golang int 

int is a signed integer type that is at least 32 bits in size. It is a distinct type, however, and not an alias for, say, int32.
uint和int情况差不多。翻译一下，就是说这个整形最少占32位，int和int32是两码事。

uint is a variable sized type, on your 64 bit computer uint is 64 bits wide.
uint类型长度取决于 CPU，如果是32位CPU就是4个字节，如果是64位就是8个字节。我的电脑是64位的，而 playground 是32位的，问题就出在这里。

这里就会出现一个情况，int和uint是根据 CPU 变化的，如何知道当前系统的情况
CPU 型号：runtime.GOARCH
int的长度：strconv.IntSize

go get -u -v github.com/nsf/gocode
go get -u -v github.com/rogpeppe/godef
go get -u -v github.com/lukehoban/go-outline
go get -u -v github.com/tpng/gopkgs

go get -u -v github.com/golang/lint/golint
go get -u -v golang.org/x/tools/cmd/guru
go get -u -v github.com/newhook/go-symbols
go get -u -v golang.org/x/tools/cmd/gorename
go get -u -v sourcegraph.com/sqs/goreturns

golang 

1: type (https://www.goinggo.net/2013/07/understanding-type-in-go.html && http://golang.org/ref/spec#Types) 
    bool - 1bit
    uint, int, uintptr ->   int (int32 or int64 - 32bit OS or 64bit OS)
    uint8, uint16, uint32, uint64
    int8, int16, int32, int64
    float32, float64
    rune 
    string: A string type represents the set of string values. A string value is a (possibly empty) sequence of bytes
Array type
    An array is a numbered sequence of elements of a single type, called the element type. 
    The number of elements is called the length of the array and is never negative.
    Arrays do not need to be initialized explicitly; 
    By default an array is zero-valued of that single type;(Kind of like struct)
    the zero value of an array is a ready-to-use array whose elements are themselves zeroed:
Slice type(make | new) -> make([]byte, 5, 5) () - > func make([]T, len, cap) []T
    A slice is a descriptor for a contiguous segment of an underlying array and provides access to a numbered sequence of elements from that array. 
    A slice type denotes the set of all slices of arrays of its element type. 
    The number of elements is called the length of the slice and is never negative. 
    The value of an uninitialized slice is nil.
    The len and cap functions will both return 0 for a nil slice.
Struct type:
    A struct is a sequence of named elements, called fields, each of which has a name and a type. 
    Field names may be specified explicitly (IdentifierList) or implicitly (EmbeddedField). 
    Within a struct, non-blank field names must be unique.
    The zero value of a struct value is not nil
      Each element of such a variable or value is set to the zero value for its type: 
        false for booleans, 
        0 for integers,
        0.0 for floats,
        "" for strings,
        nil for pointers, functions, interfaces, slices, channels, and maps.

Pointer type:
    A pointer type denotes the set of all pointers to variables of a given type, called the base type of the pointer. 
    The value of an uninitialized pointer is nil.
Function type:
    A function type denotes the set of all functions with the same parameter and result types.
    The value of an uninitialized variable of function type is nil.
Interface type: 
    An interface type specifies a method set called its interface. 
    A variable of interface type can store a value of any type with a method set that is any superset of the interface. 
    Such a type is said to implement the interface. 
    The value of an uninitialized variable of interface type is nil.

    A type implements any interface comprising any subset of its methods and may therefore implement several distinct interfaces. 
    For instance, all types implement the empty interface: interface{}
Map type(make):
    A map is an unordered group of elements of one type, called the element type, 
    indexed by a set of unique keys of another type, called the key type. 
    The value of an uninitialized map is nil.
Channel type: 
    A channel provides a mechanism for concurrently executing functions to communicate by sending and receiving values of a specified element type. 
    The value of an uninitialized channel is nil.

    8 byte alignment rule; 
    Go is a type safe language. 
    Type safety means that the compiler will validate types while compiling, 
    and throw an error if you try to assign the wrong type to a variable.

    This means that the compiler will always enforce like types on each side of an assignment operator. 
    
    Google Go is statically typed, but a number of features make it "appear" to be (at least somewhat) dynamically typed. 
    For example, you do not need to explicitly mark your class as implementing any interfaces. 
    If the method signatures of your class match up with those on the interface, then your class automatically implements that interface (a kind of duck-typing). 
    This is useful for extending built-in classes and classes in third-party libraries, 
    because you can just make up your interface to match the methods on the third-party class and 
    it will automatically implement it.

    Go's map type is not thread-safe, it is statically typed

2: Slice VS Array 
    (https://golang.org/doc/effective_go.html#slices) && 
    https://www.goinggo.net/2013/08/understanding-slices-in-go-programming.html
    https://blog.golang.org/go-slices-usage-and-internals   !!!!!

    a nil slice VS a slice pointer to an empty array;
    grows slice capacity;
    predeclared function -> copy()  and slice append() 
    you may need new a slice as some times only use a small part of underlying big array, so new a small one to release big ones;
    especially when read a file while only a small portion of the file content is needed;

3: Map 
    a nil map VS an empty map (gotour)

4: interface (gotour)
    Under the covers, interface values can be thought of as a tuple of a value and a concrete type:(value, type)
    An interface value holds a value of a specific underlying concrete type.
    Calling a method on an interface value executes the method of the same name on its underlying type.
    
    a nil value interface VS empty interface; 
    empty interface: interface{}
    It represents the empty set of methods and is satisfied by any value at all, since any value has zero or more methods.

5: embedded types , method, interface (indirection) - > object oriented programming;(封装， 集成，多态) 在 go中的类似实现 
    https://www.goinggo.net/2014/05/methods-interfaces-and-embedded-types.html
    important !!!!!! 
    method promotion!!!When we embed a type, the methods of that type become methods of the outer type, but when they are invoked, the receiver of the method is the inner type, not the outer one.
    Struct S has anonymous field T VS anonymous field *T -> methods set of S vs *S , and T , *T method promotion

    method define on T, *T, same method name will cause compile error, already exists.

6: exported && unexported (variable, struct field, function etc) in GO 
    https://www.goinggo.net/2014/03/exportedunexported-identifiers-in-go.html
    
7: all paramters (all type of) is passed by value; 

8: defer, panic, recover;  (https://www.goinggo.net/2013/06/understanding-defer-panic-and-recover.html)
    defer function paramters - > passed by value and value is at the time defer is scanned?? 
    inline defer;
    (recover panic)
9: make VS new (effective go) - > memory allocation

10: structtag, reflection -> reflect value, type (interface can be viewed as (value, type), gettag  (https://blog.golang.org/laws-of-reflection))
                                A variable of interface type stores a pair: the concrete value assigned to the variable, and that value's type descriptor.
    10.1 reflection -> type VS kind VS value
        type: Typeof
        value: Valueof -> kind: value.Kind()
    10.2 structtag can be used in field mapping, (json， xml, db etc), or data validation etc,
         you can define your own structtag, and use reflect package, get the tag and handle it in your own way
11: gofmt, go lint( code tyle), govet (correctness) godoc, gocode (代码提示）， godep
    go vendor, gb, gin 
12.1 gin -> Gin is a HTTP web framework written in Go (Golang). httprouter
    VS echo, revel; 

12.2 gb - > A project based build tool for the Go programming language
    gb-vendor->a gb plugin to manage your vendored dependencies.
13 gORM (object relation map)
14 gRPC 
    protobuffer
    compiler, plugin

15: race detect in go && mutex, RWmutex, && correct exit of goroutine
    https://www.goinggo.net/2013/09/detecting-race-conditions-with-go.html
16: concurrency VS Parallelization (effective go && https://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html) 
    GOMAXPROCS, runtime.NUMCPC() 
    https://dave.cheney.net/tag/gomaxprocs

17: time.Duration 9https://www.goinggo.net/2013/06/gos-duration-type-unravelled.html）
    最小计量单位nanosecond
    time.Ticker
18: go GB_LDFLAGS -x .....

19: type assertion, type switch (gotour, reflection)
    type assertion in reflection, 
    t.(T) !!!!

    fmt package digs into a reflect.Value to show the concrete!!!!!! value inside. The String method does not



    gotour, effective go, goblog, www.goinggo.net

20: gin 
 middleware - the sequence of middleware matters, first them move on to next 
 middleware and group sequence matters too.??? 

21: go package
   import "path/filepath"  filepath - > walk -> walkFn(root string, info FileInfo, err error ) error 
   import "os" - > File, err:= os.Open("")
        type File struct {
            // contains filtered or unexported fields
        }
         
        type FileInfo interface {
        Name() string       // base name of the file
        Size() int64        // length in bytes for regular files; system-dependent for others
        Mode() FileMode     // file mode bits
        ModTime() time.Time // modification time
        IsDir() bool        // abbreviation for Mode().IsDir()
        Sys() interface{}   // underlying data source (can return nil)
        }

    import "io/ioutil"
    import "io"
        Reader/ByteReader/ByteScanner/Writer/ReaderWriter
mysql:

order by filed('en','cn') asc 

GOLANG ERRORS: 
2018/03/16 19:12:36 http2: server: error reading preface from client [::1]:33036: read tcp [::1]:8443->[::1]:33036: read: connection reset by peer


Goroutine
通过使用goroutine而不是裸用操作系统的并发机制，以及使用消息传递来共享内存而不是使用共享内存来通信，Go语言让并发编程变得更加轻盈和安全。
通过在函数调用前使用关键字go，我们即可让该函数以goroutine方式执行，goroutine是一种比线程更加轻盈、更省资源的协程.
另外，由于一个进程内创建的所有goroutine运行在同一个内存地址空间中，因此如果不同的goroutine不得不去访问共享的内存变量，
访问前应该先获取相应的读写锁。Go语言标准库中的sync包提供了完备的读写锁功能。


history 
ID USER_ID CATEGORY, FIELD, OLDVALUE, NEWVALUE
//PRICE - > 
//FLOAT + 

USER USER_LEVEL, USER_DISCOUNT, (default 0, 98), recommended_by(...), inviationcode 
user_type: CUSTOMER, AGENT, admin
agent {agent_level, discount}
admin (admin_level, discount)

---> inviationcode --- > user --> recommended_by --> used_id;

ADMIN --> update user level/agent, discount; ()

level --- discount 

config: 

level: 0, 98
1, 95
2, 92

Transactions: 1200 -- 1000 

order id, itemid price, downpayment, final_price, currency, rate, //returnpoint 

ORDERS
id1 ItemID, XX, price, findal_price, downpayment(dingji), rate, transaction_id 
id2 itemid 2 , xx, price , findal_price, downpayment(), usd, rate, transaction_id
